// Code generated by MockGen. DO NOT EDIT.
// Source: api/employees.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	model "dev.azure.com/jjoogam/Ecommerce-core/model"
	gomock "github.com/golang/mock/gomock"
)

// MockEmployeeQueryRepository is a mock of EmployeeQueryRepository interface.
type MockEmployeeQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeQueryRepositoryMockRecorder
}

// MockEmployeeQueryRepositoryMockRecorder is the mock recorder for MockEmployeeQueryRepository.
type MockEmployeeQueryRepositoryMockRecorder struct {
	mock *MockEmployeeQueryRepository
}

// NewMockEmployeeQueryRepository creates a new mock instance.
func NewMockEmployeeQueryRepository(ctrl *gomock.Controller) *MockEmployeeQueryRepository {
	mock := &MockEmployeeQueryRepository{ctrl: ctrl}
	mock.recorder = &MockEmployeeQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeQueryRepository) EXPECT() *MockEmployeeQueryRepositoryMockRecorder {
	return m.recorder
}

// GetEmployees mocks base method.
func (m *MockEmployeeQueryRepository) GetEmployees(ctx context.Context) ([]model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployees", ctx)
	ret0, _ := ret[0].([]model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployees indicates an expected call of GetEmployees.
func (mr *MockEmployeeQueryRepositoryMockRecorder) GetEmployees(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployees", reflect.TypeOf((*MockEmployeeQueryRepository)(nil).GetEmployees), ctx)
}
