// Code generated by MockGen. DO NOT EDIT.
// Source: api/offices.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	model "dev.azure.com/jjoogam/Ecommerce-core/model"
	gomock "github.com/golang/mock/gomock"
)

// MockOfficeQueryRepository is a mock of OfficeQueryRepository interface.
type MockOfficeQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOfficeQueryRepositoryMockRecorder
}

// MockOfficeQueryRepositoryMockRecorder is the mock recorder for MockOfficeQueryRepository.
type MockOfficeQueryRepositoryMockRecorder struct {
	mock *MockOfficeQueryRepository
}

// NewMockOfficeQueryRepository creates a new mock instance.
func NewMockOfficeQueryRepository(ctrl *gomock.Controller) *MockOfficeQueryRepository {
	mock := &MockOfficeQueryRepository{ctrl: ctrl}
	mock.recorder = &MockOfficeQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfficeQueryRepository) EXPECT() *MockOfficeQueryRepositoryMockRecorder {
	return m.recorder
}

// GetOffices mocks base method.
func (m *MockOfficeQueryRepository) GetOffices(ctx context.Context) ([]model.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffices", ctx)
	ret0, _ := ret[0].([]model.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffices indicates an expected call of GetOffices.
func (mr *MockOfficeQueryRepositoryMockRecorder) GetOffices(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffices", reflect.TypeOf((*MockOfficeQueryRepository)(nil).GetOffices), ctx)
}
