// Code generated by MockGen. DO NOT EDIT.
// Source: api/customers.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	model "dev.azure.com/jjoogam/Ecommerce-core/model"
	gomock "github.com/golang/mock/gomock"
)

// MockCustomerQueryRepository is a mock of CustomerQueryRepository interface.
type MockCustomerQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerQueryRepositoryMockRecorder
}

// MockCustomerQueryRepositoryMockRecorder is the mock recorder for MockCustomerQueryRepository.
type MockCustomerQueryRepositoryMockRecorder struct {
	mock *MockCustomerQueryRepository
}

// NewMockCustomerQueryRepository creates a new mock instance.
func NewMockCustomerQueryRepository(ctrl *gomock.Controller) *MockCustomerQueryRepository {
	mock := &MockCustomerQueryRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerQueryRepository) EXPECT() *MockCustomerQueryRepositoryMockRecorder {
	return m.recorder
}

// FindCustomer mocks base method.
func (m *MockCustomerQueryRepository) FindCustomer(ctx context.Context, customerNumber int) (*model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCustomer", ctx, customerNumber)
	ret0, _ := ret[0].(*model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCustomer indicates an expected call of FindCustomer.
func (mr *MockCustomerQueryRepositoryMockRecorder) FindCustomer(ctx, customerNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCustomer", reflect.TypeOf((*MockCustomerQueryRepository)(nil).FindCustomer), ctx, customerNumber)
}

// GetCustomers mocks base method.
func (m *MockCustomerQueryRepository) GetCustomers(ctx context.Context) ([]model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomers", ctx)
	ret0, _ := ret[0].([]model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomers indicates an expected call of GetCustomers.
func (mr *MockCustomerQueryRepositoryMockRecorder) GetCustomers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomers", reflect.TypeOf((*MockCustomerQueryRepository)(nil).GetCustomers), ctx)
}
