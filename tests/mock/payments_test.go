// Code generated by MockGen. DO NOT EDIT.
// Source: api/payments.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	model "dev.azure.com/jjoogam/Ecommerce-core/model"
	gomock "github.com/golang/mock/gomock"
)

// MockPaymentQueryRepository is a mock of PaymentQueryRepository interface.
type MockPaymentQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentQueryRepositoryMockRecorder
}

// MockPaymentQueryRepositoryMockRecorder is the mock recorder for MockPaymentQueryRepository.
type MockPaymentQueryRepositoryMockRecorder struct {
	mock *MockPaymentQueryRepository
}

// NewMockPaymentQueryRepository creates a new mock instance.
func NewMockPaymentQueryRepository(ctrl *gomock.Controller) *MockPaymentQueryRepository {
	mock := &MockPaymentQueryRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentQueryRepository) EXPECT() *MockPaymentQueryRepositoryMockRecorder {
	return m.recorder
}

// GetPayments mocks base method.
func (m *MockPaymentQueryRepository) GetPayments(ctx context.Context) ([]model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayments", ctx)
	ret0, _ := ret[0].([]model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayments indicates an expected call of GetPayments.
func (mr *MockPaymentQueryRepositoryMockRecorder) GetPayments(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayments", reflect.TypeOf((*MockPaymentQueryRepository)(nil).GetPayments), ctx)
}
