// Code generated by MockGen. DO NOT EDIT.
// Source: api/orders.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	model "dev.azure.com/jjoogam/Ecommerce-core/model"
	gomock "github.com/golang/mock/gomock"
)

// MockStudentQueryRepository is a mock of StudentQueryRepository interface.
type MockStudentQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStudentQueryRepositoryMockRecorder
}

// MockStudentQueryRepositoryMockRecorder is the mock recorder for MockStudentQueryRepository.
type MockStudentQueryRepositoryMockRecorder struct {
	mock *MockStudentQueryRepository
}

// NewMockStudentQueryRepository creates a new mock instance.
func NewMockStudentQueryRepository(ctrl *gomock.Controller) *MockStudentQueryRepository {
	mock := &MockStudentQueryRepository{ctrl: ctrl}
	mock.recorder = &MockStudentQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentQueryRepository) EXPECT() *MockStudentQueryRepositoryMockRecorder {
	return m.recorder
}

// Getorders mocks base method.
func (m *MockStudentQueryRepository) Getorders(ctx context.Context) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getorders", ctx)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Getorders indicates an expected call of Getorders.
func (mr *MockStudentQueryRepositoryMockRecorder) Getorders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getorders", reflect.TypeOf((*MockStudentQueryRepository)(nil).Getorders), ctx)
}
