// Code generated by MockGen. DO NOT EDIT.
// Source: api/productlines.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	model "dev.azure.com/jjoogam/Ecommerce-core/model"
	gomock "github.com/golang/mock/gomock"
)

// MockProductLineQueryRepository is a mock of ProductLineQueryRepository interface.
type MockProductLineQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductLineQueryRepositoryMockRecorder
}

// MockProductLineQueryRepositoryMockRecorder is the mock recorder for MockProductLineQueryRepository.
type MockProductLineQueryRepositoryMockRecorder struct {
	mock *MockProductLineQueryRepository
}

// NewMockProductLineQueryRepository creates a new mock instance.
func NewMockProductLineQueryRepository(ctrl *gomock.Controller) *MockProductLineQueryRepository {
	mock := &MockProductLineQueryRepository{ctrl: ctrl}
	mock.recorder = &MockProductLineQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductLineQueryRepository) EXPECT() *MockProductLineQueryRepositoryMockRecorder {
	return m.recorder
}

// GetProductLines mocks base method.
func (m *MockProductLineQueryRepository) GetProductLines(ctx context.Context) ([]model.ProductLine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductLines", ctx)
	ret0, _ := ret[0].([]model.ProductLine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductLines indicates an expected call of GetProductLines.
func (mr *MockProductLineQueryRepositoryMockRecorder) GetProductLines(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductLines", reflect.TypeOf((*MockProductLineQueryRepository)(nil).GetProductLines), ctx)
}
