// Code generated by MockGen. DO NOT EDIT.
// Source: orderdetails.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	model "dev.azure.com/jjoogam/Ecommerce-core/model"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderDetailQueryRepository is a mock of OrderDetailQueryRepository interface.
type MockOrderDetailQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderDetailQueryRepositoryMockRecorder
}

// MockOrderDetailQueryRepositoryMockRecorder is the mock recorder for MockOrderDetailQueryRepository.
type MockOrderDetailQueryRepositoryMockRecorder struct {
	mock *MockOrderDetailQueryRepository
}

// NewMockOrderDetailQueryRepository creates a new mock instance.
func NewMockOrderDetailQueryRepository(ctrl *gomock.Controller) *MockOrderDetailQueryRepository {
	mock := &MockOrderDetailQueryRepository{ctrl: ctrl}
	mock.recorder = &MockOrderDetailQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderDetailQueryRepository) EXPECT() *MockOrderDetailQueryRepositoryMockRecorder {
	return m.recorder
}

// DeleteOrder mocks base method.
func (m *MockOrderDetailQueryRepository) DeleteOrder(ctx context.Context, orderNumber int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, orderNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderDetailQueryRepositoryMockRecorder) DeleteOrder(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderDetailQueryRepository)(nil).DeleteOrder), ctx, orderNumber)
}

// FindOrderDetails mocks base method.
func (m *MockOrderDetailQueryRepository) FindOrderDetails(ctx context.Context, orderNumber int) ([]model.OrderDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderDetails", ctx, orderNumber)
	ret0, _ := ret[0].([]model.OrderDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderDetails indicates an expected call of FindOrderDetails.
func (mr *MockOrderDetailQueryRepositoryMockRecorder) FindOrderDetails(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderDetails", reflect.TypeOf((*MockOrderDetailQueryRepository)(nil).FindOrderDetails), ctx, orderNumber)
}

// GetOrderDetails mocks base method.
func (m *MockOrderDetailQueryRepository) GetOrderDetails(ctx context.Context) ([]model.OrderDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetails", ctx)
	ret0, _ := ret[0].([]model.OrderDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetails indicates an expected call of GetOrderDetails.
func (mr *MockOrderDetailQueryRepositoryMockRecorder) GetOrderDetails(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetails", reflect.TypeOf((*MockOrderDetailQueryRepository)(nil).GetOrderDetails), ctx)
}
