// Code generated by MockGen. DO NOT EDIT.
// Source: product.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	model "dev.azure.com/jjoogam/Ecommerce-core/model"
	gomock "github.com/golang/mock/gomock"
)

// MockProductQueryRepository is a mock of ProductQueryRepository interface.
type MockProductQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductQueryRepositoryMockRecorder
}

// MockProductQueryRepositoryMockRecorder is the mock recorder for MockProductQueryRepository.
type MockProductQueryRepositoryMockRecorder struct {
	mock *MockProductQueryRepository
}

// NewMockProductQueryRepository creates a new mock instance.
func NewMockProductQueryRepository(ctrl *gomock.Controller) *MockProductQueryRepository {
	mock := &MockProductQueryRepository{ctrl: ctrl}
	mock.recorder = &MockProductQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductQueryRepository) EXPECT() *MockProductQueryRepositoryMockRecorder {
	return m.recorder
}

// DeleteProduct mocks base method.
func (m *MockProductQueryRepository) DeleteProduct(ctx context.Context, productCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, productCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductQueryRepositoryMockRecorder) DeleteProduct(ctx, productCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductQueryRepository)(nil).DeleteProduct), ctx, productCode)
}

// FindProduct mocks base method.
func (m *MockProductQueryRepository) FindProduct(ctx context.Context, productCode string) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProduct", ctx, productCode)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProduct indicates an expected call of FindProduct.
func (mr *MockProductQueryRepositoryMockRecorder) FindProduct(ctx, productCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProduct", reflect.TypeOf((*MockProductQueryRepository)(nil).FindProduct), ctx, productCode)
}

// GetProducts mocks base method.
func (m *MockProductQueryRepository) GetProducts(ctx context.Context) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductQueryRepositoryMockRecorder) GetProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProductQueryRepository)(nil).GetProducts), ctx)
}
